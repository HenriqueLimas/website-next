export interface Input {
  renderBody: Marko.Body;
}

define/Outline|input: { page: string; renderBody: Marko.Renderable }|
  if=$global.url.href.endsWith(input.page + "/")
    strong
      ${input.renderBody}
    toc
  else
    a href=`../${input.page}/`
      ${input.renderBody}

local-let/mode="html" key="syntax-mode"
nav
  button onClick() {
    mode = mode === "html" ? "concise" : "html";
  }
    -- ${mode} mode
  ul
    li
      local-let/open=true key="nav-reference-open"
      details [
        open=open
        onToggle(e) {
          open = (e.target as HTMLDetailsElement).open;
        }
      ]
        summary -- Reference
        ul
          li
            Outline page="language" -- Language
          li
            Outline page="custom-tag" -- Custom Tags
          li
            Outline page="reactivity" -- Reactivity
          li
            Outline page="core-tag" -- Core Tags
          li
            Outline page="native-tag" -- Native Tags
          li
            Outline page="concise-syntax" -- Concise Syntax
          li
            Outline page="template" -- Template API
          li
            Outline page="typescript" -- TypeScript
    li
      local-let/open=true key="nav-guides-open"
      details [
        open=open
        onToggle(e) {
          open = (e.target as HTMLDetailsElement).open;
        }
      ]
        summary -- Guides
        ul
          li
            Outline page="styling" -- Styling
          li
            Outline page="getting-started" -- Getting Started

main class=mode === "concise" && "concise-mode"
  ${input.renderBody}

style
  --
  :root {
    --section-color: var(--color-blue-primary);
  }

  * {
    --section-color-translucent: oklch(from var(--section-color) l c h / 0.05);
    --section-color-text: color-mix(
      in oklab,
      var(--section-color) 70%,
      var(--color-foreground)
    );
  }

  main {
    padding: 3rem 2rem;
    max-width: 50rem;
    margin-left: 15rem;
  }

  nav {
    position: fixed;
    inset: 0;
    padding-top: 3rem;
    width: 15rem;
    overflow-y: scroll;

    ul {
      list-style-type: none;
      padding-left: 1rem;
    }

    details {
      user-select: none;
    }
  }

  p,
  li {
    line-height: 1.5;
  }

  h1 ~ section:nth-of-type(5n + 3) {
    --section-color: var(--color-red-primary);
  }
  h1 ~ section:nth-of-type(5n + 1) {
    --section-color: var(--color-green-primary);
  }
  h1 ~ section:nth-of-type(5n + 2) {
    --section-color: var(--color-yellow-primary);
  }
  h1 ~ section:nth-of-type(5n + 4) {
    --section-color: var(--color-purple-primary);
  }

  a {
    color: var(--section-color-text);
  }

  :not(pre) > code {
    color: var(--section-color-text);
    background-color: var(--section-color-translucent);
    padding: 0.15rem 0.3rem;
    border-radius: 0.3rem;
    border: 1px solid oklch(from var(--section-color) l c h / 0.2);
  }

  pre {
    background-color: var(--section-color-translucent);
    padding: 1rem;
    border-radius: 0.5rem;
    border: 1px solid oklch(from var(--section-color) l c h / 0.5);
    overflow-x: scroll;
  }

  .marko-codespan__tag {
    &::before {
      content: "<";
    }
    &::after {
      content: ">";
    }
  }

  .marko-codespan__attribute {
    &::after {
      content: "=";
    }
  }

  :is(h1, h2, h3, h4, h5, h6) {
    position: relative;
    color: var(--section-color);

    & > a:last-child {
      position: absolute;
      top: 50%;
      left: 0;
      translate: -100% -50%;
      width: 2rem;
      height: 2rem;
      text-align: center;
      line-height: 2rem;
      font-size: large;
      opacity: 0;
      text-decoration: none;

      @media (pointer: coarse) {
        opacity: 0.25;
      }
    }

    &:hover > a:last-child,
    &:focus-within > a:last-child {
      opacity: 0.25;

      &:hover {
        opacity: 1;
      }
    }
  }

  /* Alerts */

  .markdown-alert {
    border-left: 4px solid var(--section-color);
    background-color: var(--section-color-translucent);
    padding: 0.5rem 1rem;
    margin: 1rem 0;
    border-radius: 0.5rem;
  }

  .markdown-alert-title {
    color: var(--section-color-text);
    display: flex;
    gap: 0.5rem;
    align-items: center;
    margin: 0.5rem;

    svg {
      fill: currentColor;
    }
  }

  .markdown-alert-caution {
    --section-color: var(--color-red-secondary);
  }

  .markdown-alert-note {
    --section-color: var(--color-blue-secondary);
  }

  .markdown-alert-tip {
    --section-color: var(--color-yellow-secondary);
  }

  .markdown-alert-important {
    --section-color: var(--color-green-secondary);
  }
  --
