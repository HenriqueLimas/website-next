export type RecursiveList = {id: string, title: string, children: RecursiveList}[];
export interface Input {
  item: RecursiveList;
}
static interface VisibilityChangeEventDetail {
  isIntersecting: boolean;
}
client const observer = new IntersectionObserver((entries) => {
  for (const entry of entries) {
    entry.target.dispatchEvent(
      new CustomEvent<VisibilityChangeEventDetail>("visibility-change", {
        detail: { isIntersecting: entry.isIntersecting },
      }),
    );
  }
});

const/{ item }=input

for|item| of=item
  li
    let/visible=false
    a href=`#${item.id}` class=visible && "visible" -- ${item.title}
    if=(item.children.length)
      ul
        toc-tree item=item.children
    script
      --
      const section = document.getElementById(item.id);
      if (section) {
        observer.observe(section);
        section.addEventListener(
          "visibility-change",
          (e: CustomEventInit<VisibilityChangeEventDetail>) => {
            visible = !!e.detail?.isIntersecting;
          },
          {
            signal: $signal,
          },
        );
        $signal.onabort = () => observer.unobserve(section);
      }
      --
