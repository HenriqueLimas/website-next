import { faGithub } from "@fortawesome/free-brands-svg-icons";
import text from "./text-styles.module.css";
<main>
  <h1>
    A
    <strong class=[text.gradient, text.red]>
      declarative
    </strong>
    ${", "}
    <strong class=[text.gradient, text.yellow]>
      HTML-Based
    </strong>
    ${" "}
    <strong class=[text.gradient, text.blue]>
      Language
    </strong>
    ${" "} that makes
    <strong class=[text.gradient, text.green]>
      Building
    </strong>
    ${" "}
    <strong class=[text.gradient, text.purple]>
      Web Apps
    </strong>
    ${" "}
    <strong class=[text.gradient, text.red]>
      Fun
    </strong>
  </h1>

  <div class="cta-links">
    <a class="cta-link cta-link--primary" href="docs/tutorial/getting-started/">
      Get Started
    </a>
    <a
      class="cta-link cta-link--secondary"
      href="https://github.com/marko-js/marko"
      target="_blank"
    >
      <fa-icon=faGithub/>
       GitHub
      <span>
        <let/stars=null as number | null/>
        ${stars}
        <script>
          fetch("https://api.github.com/repos/marko-js/marko")
            .then((res) => res.json())
            .then((repo) => {
              if (repo.stargazers_count) {
                stars = repo.stargazers_count.toLocaleString();
              }
            });
        </script>
      </span>
       ⭐️
    </a>
  </div>

  <feature-cards>
    <@card image="" title="Familiar">
      If you know HTML, CSS, and JavaScript, you know Marko
    </@card>
    <@card image="" title="Performant">
      Streaming, partial hydration, an optimizing compiler, and a small runtime
    </@card>
    <@card image="" title="Scalable">
      Start with simple HTML templates and add powerful components as needed
    </@card>
    <@card image="" title="Trusted">
      Marko is powering high-traffic websites like ebay.com
    </@card>
  </feature-cards>

  <figure-section title="HTML Re-Imagined" color="red" fullWidth>
    <@figure class="counter-example">
      <code-block
        lang="marko"
        text=`<let/count=0>
<button onClick() { count++ }>
  Count is \${count}
</button>
`
      />
      <div>
        <let/count=0/>
        <button onClick() {
          count++;
        }>
          Count is ${count}
        </button>
      </div>
    </@figure>
    <@cta href="/docs/reference/language">
      Learn More
    </@cta>
    Marko is HTML re-imagined as a language for building dynamic and reactive user interfaces. Just about any valid HTML is valid Marko, but Marko extends the HTML language to allow building modern applications in a declarative way.${" "}
  </figure-section>

  <figure-section title="Progressive Rendering" color="blue" reverse>
    <@figure>
      <let/progress=0/>
      <div class="demo-pages">
        <demo-page
          label="a blank white screen for 1 second, followed by a generic e-commerce page loaded all at once"
          title="buffered"
          progress=progress
          buffered
        />
        <demo-page
          label="a generic e-commerce page rendered progressively while the buffered example shows a white screen"
          title="streamed"
          progress=progress
        />
      </div>
      <script>
        const id = setTimeout(() => (progress = (progress + 0.01) % 1.5), 20);
        $signal.onabort = () => clearTimeout(id);
      </script>
    </@figure>
    <@cta href="/docs/explanation/streaming">
      Learn More
    </@cta>
    Marko streams content to your users as soon as it's ready. No waiting for client side JavaScript bundles or data requests to start rendering. HTML, assets, and images are loaded as soon as possible with asynchronous data loading in as it completes.
  </figure-section>

  <figure-section title="Code Elimination" color="yellow">
    <@figure>
      <div class="demo-pages">
        <demo-page
          label="a visual indication that every component on a webpage is recalculated with JavaScript"
          title="full-page"
          progress=1
          hydrateAll
        />
        <demo-page
          label="a visual indication that only interactive parts of a webpage are recalculated with JavaScript"
          title="targeted"
          progress=1
          hydratePartial
        />
      </div>
    </@figure>
    <@cta href="/docs/explanation/optimizing-performance">
      Learn More
    </@cta>
    Marko only sends the code for interactive parts to the browser. Its compiler automatically detects which components only need to be rendered on the server. This means less to download and less to execute. Your users can enjoy top tier performance regardless of their devices or networks.
  </figure-section>

  <ai-testimonies/>

  <h2 class=[text.gradient, text.green]>
    Join the Community
  </h2>

  <div class="section-body">
    <p>Need help? Want to Contribute?</p>
    <p>
      <strong>Get involved in the Marko Community!</strong>
    </p>
    <community-cards/>
  </div>
</main>

<style>
  body {
    padding: 4rem 1rem;
  }

  main > * {
    max-width: 50rem;
    margin: 1lh auto;
  }

  h1,
  h2 {
    text-align: center;
  }

  .cta-links {
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  .cta-link {
    border-radius: 2rem;
    padding: 0.5rem 1rem;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;

    svg {
      height: 1lh;
      path {
        fill: currentColor;
      }
    }
  }

  .cta-link--primary {
    background: linear-gradient(to right, #ff425b, #a31460);
    color: white;
  }

  .cta-link--secondary {
    color: var(--color-foreground);
    border: 1px solid currentColor;
  }

  .counter-example {
    box-shadow: 0 0 1rem var(--color-foreground);
    border-radius: 1rem;
    overflow: clip;
    position: relative;

    pre {
      padding: 3rem 1rem;
      margin: 0;
      display: flex;
    }

    > div {
      position: absolute;
      right: 1rem;
      bottom: 1rem;
    }
  }

  .demo-pages {
    display: flex;
    gap: 1rem;
    justify-content: space-around;

    > * {
      box-shadow: 0 0 0.5rem var(--color-foreground);
    }

    > :first-child {
      translate: 0 1rem;
    }
    > :last-child {
      translate: 0 -1rem;
    }
  }

  .section-body {
    text-align: center;
  }
</style>
