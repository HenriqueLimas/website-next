export interface PlaygroundFile {
  name: string;
  path: string;
  content: string;
}

export interface Input {
  files: PlaygroundFile[];
  filesChange: (files: PlaygroundFile[]) => void;
}

client {
  import { shikiToMonaco } from "@shikijs/monaco";
  import * as monaco from "monaco-editor-core";
  import { createHighlighter } from "shiki";

  const langs = ['marko', 'javascript', 'typescript', 'html', 'css'];
  
  const highlighter = await createHighlighter({
    langs,
    themes: ["vitesse-dark"],
  })

  for (const lang of langs) {
    monaco.languages.register({ id: lang });
  }

  shikiToMonaco(highlighter, monaco);
}


div.editor/editorContainer

let/file=input.files[0]

/** TODO(parser?)
 * The `as` type isn't stripped when this is
 * ```
 * let/editor = undefined as monaco.editor.IStandaloneCodeEditor | undefined
 * ```
 */
static const editorType = undefined as monaco.editor.IStandaloneCodeEditor | undefined
let/editor=editorType

lifecycle onMount() {
  console.log(input);
  editor = monaco.editor.create(editorContainer(), {
    value: file.content,
    language: file.name.substring(file.name.lastIndexOf('.') + 1),
    theme: "vitesse-dark",
  });
}

style --
  .editor {
    height: 100vh;
  }